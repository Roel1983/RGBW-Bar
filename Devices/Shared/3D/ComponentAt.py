#!/usr/bin/python

import sys, getopt, re

def help(exit_code):
	print '{} -i <inputfile> -o <outputfile>'.format(sys.argv[0])
	sys.exit(exit_code)

def main(argv):
  	inputfile  = ''
	outputfile = ''
	try:
		opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
	except getopt.GetoptError:
		help(2)
	for opt, arg in opts:
		if opt == '-h':
			help()
		elif opt in ("-i", "--ifile"):
			inputfile = arg
		elif opt in ("-o", "--ofile"):
			outputfile = arg
	if inputfile == '' or outputfile == '':
		help(2)

	pcb_file      = open(inputfile, 'r')
	output_file   = open(outputfile, 'w')

	output_file.write("# Generated by: {} -i {} -o {}\n".format(sys.argv[0], inputfile, outputfile))
	output_file.write("\n")
	output_file.write("COMPONENT_AT_SIDE      = 0;\n")
	output_file.write("COMPONENT_AT_LOCATION  = 1;\n")
	output_file.write("COMPONENT_AT_ROTATION  = 2;\n")
	output_file.write("COMPONENT_AT_FOOTPRINT = 3;\n")
	output_file.write("\n")

	foot_print    = ""
	side          = ""
	at_x          = 0;
	at_y          = 0;
	at_r          = 0;
	reference     = "";

	got_module    = False
	got_at        = False
	got_reference = False

	for line in pcb_file.readlines():
		m = re.match("^[ ]*[(]module ([^:]+:[^ ]+)(?: locked)? [(]layer ([FB]).Cu[)].*$", line)
		if m:
			foot_print    = m.group(1)
			side          = m.group(2)
			got_module    = True
			got_at        = False;
			got_reference = False;

		m = re.match("^[ ]*[(]at (\d+(?:.\d+)?) (\d+(?:.\d+)?)(?: (\d+(?:.\d+)?))?.*", line)
		if m:
			at_x   = m.group(1)
			at_y   = m.group(2)
			at_r   = m.group(3) if m.group(3) else 0
			got_at = True;
		m = re.match("^[ ]*[(]fp_text reference ([^ ]+) .*$", line)
		if m:
			reference     = m.group(1)
			got_reference = True;

		if got_module and got_at and got_reference:
			output_file.write('{}_at = ["{}",[{},{}],{}];\n'.format(reference, side, at_x, at_y, at_r))
			got_module    = False
			got_at        = False;
			got_reference = False;

	output_file.close()
	pcb_file.close()

if __name__ == "__main__":
	main(sys.argv[1:])

